1.树：n（n>=0）个节点的有限集合.是一种：一对多的关系。
   n>0时，根节点是唯一的，
   m>0时，子树的个数没有限制，但是他们是互不相交的。（子树互不相交）

2.结点分成：根节点 内部结点 叶节点（终端节点，度=0）
  度：是结点拥有子节点的个数 ；树的度：各结点度的最大值

3.树中结点的最大层次称为树的深度或高度
  同一双亲的孩子之间叫兄弟（同一个双亲）
  度！=深度

4.树的存储结构：双亲表示法、孩子表示法和孩子兄弟表示法。
双亲孩子表示法：顺序存储+链式存储
孩子兄弟表示法：变成二叉树

5.二叉树：由一个根节点和两棵互不相交的左子树和右子树组成。（最多2个节点）
说明：二叉树的度不超过2  是有序树 

完全二叉树：对一颗具有n个节点的二叉树按层序编号，如果编号为i的节点与同样深度的满二叉树中编号为i的结点在二叉树中的位置完全相同，这棵树就是完全二叉树。
完全二叉树的特点：1）叶子结点只能出现在最下面两层。2）最下层的叶子一定集中在左边连续的位置。3）倒数二层，若有叶子结点，一定出现在右边的连续位置。 4）结点度为1，该节点只能有左结点。5）同样结点数的二叉树，完全二叉树的深度最小。

6.二叉树的特性：
1）在二叉树中，第i层至多有2^(i-1)个节点。
2）深度为i的二叉树。最多有2^i-1个节点。
3）对任意一颗二叉树T，如果终端结点数为n0，度为2的结点数为n2，那么n0=n2+1。
（n=n1+n2+n3 n-1=2*n2+n1）
4）具有n个节点的完全二叉树的深度为[log(2)n]+1。[]为不超过的最大整数。
5）对于一个深度为n的完全二叉树而言，
如果i=1,那么节点i是二叉树的根节点；如果i>1,那么双亲的结点是[i/2]。
如果2i>n,那么节点i无左孩子（节点i为叶子结点）；否则左孩子结点是2i。
如果2i+1>n,那么节点i无右孩子；否则他的右孩子是节点2i+1。

7.二叉树的存储结构
顺序存储结构：适合完全二叉树（使用数组存储二叉树中的数据）
二叉链表结构：一个数据域，两个指针域。

8.二叉树的遍历
前序遍历（根-左-右）中序遍历（左-根-右） 后序遍历（左-右-根） 层序遍历（就是逐层遍历）
说明：
知道树的前序遍历和中序遍历可以唯一确定一个二叉树
知道树的后序遍历和中序遍历也可以唯一确定一个二叉树

9.线索二叉树
线索二叉树：指向前驱和后继的指针成为线索，加上线索的二叉链表成为线索链表，相对应的二叉树就称为线索二叉树。
线索化:对二叉树以某种次序遍历使其变成线索二叉树的过程就成为线索化。

10.树、森林和二叉树的转换
(1)树转变成二叉树
1.加线：在所有兄弟节点之间加线
2.去线：去掉所有与其他孩子间的连线，只保留和第一个孩子间的连线。
3.旋转：第一个孩子是左结点，兄弟结点变成右结点。
(2)森林转变成二叉树
1.将每一棵树变成二叉树
2.第一颗树不动，后面的树依次成为前一颗树根节点的右结点。
(3)二叉树变成树
1.加线：某结点的左孩子存在；将左孩子的右孩子、左孩子的右孩子的右孩子、左孩子的右孩子的右孩子的右孩子...依次跟该节点相连。
2.去掉所有和右孩子相连的线。
3.旋转
(4)二叉树变成森林
1.判断：如果根节点存在右结点，那么就可以转换。
2.去线：从根节点开始，去掉右结点的连线。
3.依次将二叉树变成树即可。
(5)树和森林的遍历
1.树的遍历：先根遍历 后根遍历
2.森林的遍历：前序遍历 后序遍历

11.赫夫曼树及应用----数据的压缩
赫夫曼树：带权路径长度WPL最小的二叉树成为赫夫曼树。
按照大小重新编排
赫夫曼编码








